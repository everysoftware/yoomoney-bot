from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

from app.payments import get_quick_pay, check_quick_pay

router = Router()


@router.message(CommandStart())
async def start(message: types.Message) -> None:
    markup = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞ ‚≠êÔ∏è")]],
        one_time_keyboard=True,
        resize_keyboard=True,
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=markup)


@router.message(F.text == "–ü–æ–¥–ø–∏—Å–∫–∞ ‚≠êÔ∏è")
async def subscribe_request(message: types.Message, state: FSMContext) -> None:
    user_data = await state.get_data()
    if user_data.get("is_subscribed"):
        await message.answer("–£ –≤–∞—Å —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è :)")
        return

    pay = get_quick_pay()
    await state.update_data(pay_state=pay.label)
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=pay.redirected_url)],
            [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="btn:claim")],
        ]
    )

    await message.answer(
        '<b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: 100 —Ä—É–±.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏ –∫ '
        '–æ–ø–ª–∞—Ç–µ", –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂" ü§ë',
        reply_markup=markup,
    )


@router.callback_query(F.data == "btn:claim")
async def check_payment(callback: types.CallbackQuery, state: FSMContext) -> None:
    user_data = await state.get_data()
    if user_data.get("is_subscribed"):
        await callback.answer(
            "–£ –≤–∞—Å —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è :)"
        )
        return
    pay_state = user_data.get("pay_state")
    if not pay_state:
        await callback.answer("–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return
    if check_quick_pay(pay_state):
        await state.update_data(is_subscribed=True)
        await callback.message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!")
    else:
        await callback.message.answer(
            "–û–ø–ª–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        )
    await callback.answer()
